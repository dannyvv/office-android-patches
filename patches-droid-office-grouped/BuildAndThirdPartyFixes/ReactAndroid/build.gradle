--- "e:\\github\\fb-react-native-forpatch-base\\ReactAndroid\\build.gradle"	2020-01-30 13:55:48.205611000 -0800
+++ "e:\\github\\ms-react-native-forpatch\\ReactAndroid\\build.gradle"	2020-02-20 11:21:17.365518300 -0800
@@ -22,10 +22,11 @@
 def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")
 
 // You need to have following folders in this directory:
-//   - boost_1_63_0
+//   - boost_1_68_0
 //   - double-conversion-1.1.6
 //   - folly-deprecate-dynamic-initializer
 //   - glog-0.3.5
+
 def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")
 
 // The Boost library is a very large download (>100MB).
@@ -33,6 +34,8 @@
 // and the build will use that.
 def boostPath = dependenciesPath ?: System.getenv("REACT_NATIVE_BOOST_PATH")
 
+def V8Path = 'packages/ReactNative.V8.Android.7.0.276.32-v1'
+
 task createNativeDepsDirectories {
     downloadsDir.mkdirs()
     thirdPartyNdkDir.mkdirs()
@@ -48,12 +51,14 @@
 task prepareBoost(dependsOn: boostPath ? [] : [downloadBoost], type: Copy) {
     from(boostPath ?: tarTree(resources.gzip(downloadBoost.dest)))
     from("src/main/jni/third-party/boost/Android.mk")
-    include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp")
+    include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp", "boost/**/*.hpp") // Due to the layout of the nuget, we need the version without an extra boot dir
     includeEmptyDirs = false
     into("$thirdPartyNdkDir/boost")
-    doLast {
-        file("$thirdPartyNdkDir/boost/boost").renameTo("$thirdPartyNdkDir/boost/boost_${BOOST_VERSION}")
-    }
+    
+    // Not sure where our diff is that causes this to not work for us
+    // doLast {
+    //     file("$thirdPartyNdkDir/boost/boost").renameTo("$thirdPartyNdkDir/boost/boost_${BOOST_VERSION}")
+    // }
 }
 
 task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
@@ -66,8 +71,7 @@
 task prepareDoubleConversion(dependsOn: dependenciesPath ? [] : [downloadDoubleConversion], type: Copy) {
     from(dependenciesPath ?: tarTree(downloadDoubleConversion.dest))
     from("src/main/jni/third-party/double-conversion/Android.mk")
-    include("double-conversion-${DOUBLE_CONVERSION_VERSION}/src/**/*", "Android.mk")
-    filesMatching("*/src/**/*", { fname -> fname.path = "double-conversion/${fname.name}" })
+    include 'double-conversion/**/*', 'Android.mk'
     includeEmptyDirs = false
     into("$thirdPartyNdkDir/double-conversion")
 }
@@ -82,8 +86,8 @@
 task prepareFolly(dependsOn: dependenciesPath ? [] : [downloadFolly], type: Copy) {
     from(dependenciesPath ?: tarTree(downloadFolly.dest))
     from("src/main/jni/third-party/folly/Android.mk")
-    include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
-    eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
+    include("Folly/folly/**/*", "Android.mk")
+    eachFile {fname -> fname.path = (fname.path - "Folly/")}
     includeEmptyDirs = false
     into("$thirdPartyNdkDir/folly")
 }
@@ -100,7 +104,7 @@
 task prepareGlog(dependsOn: dependenciesPath ? [] : [downloadGlog], type: Copy) {
     from(dependenciesPath ?: tarTree(downloadGlog.dest))
     from("src/main/jni/third-party/glog/")
-    include("glog-${GLOG_VERSION}/src/**/*", "Android.mk", "config.h")
+    include("glog/src/**/*", "Android.mk", "config.h")
     includeEmptyDirs = false
     filesMatching("**/*.h.in") {
         filter(ReplaceTokens, tokens: [
@@ -239,6 +243,8 @@
             "NDK_OUT=" + temporaryDir,
             "NDK_LIBS_OUT=$buildDir/react-ndk/all",
             "THIRD_PARTY_NDK_DIR=$buildDir/third-party-ndk",
+            "THIRD_PARTY_NDK_SRC_DIR=$projectDir/src/main/jni/third-party",
+            "V8_NUGET_DIR=$projectDir/$V8Path",
             "REACT_COMMON_DIR=$projectDir/../ReactCommon",
             "REACT_SRC_DIR=$projectDir/src/main/java/com/facebook/react",
             "-C", file("src/main/jni/react/jni").absolutePath,
@@ -252,7 +258,10 @@
     commandLine(getNdkBuildFullPath(),
             "NDK_APPLICATION_MK=$projectDir/src/main/jni/Application.mk",
             "THIRD_PARTY_NDK_DIR=$buildDir/third-party-ndk",
+            "THIRD_PARTY_NDK_SRC_DIR=$projectDir/src/main/jni/third-party",
+            "V8_NUGET_DIR=$projectDir/$V8Path",
             "REACT_COMMON_DIR=$projectDir/../ReactCommon",
+            "REACT_SRC_DIR=$projectDir/src/main/java/com/facebook/react",
             "-C", file("src/main/jni/react/jni").absolutePath,
             "clean")
     doLast {
@@ -261,10 +270,17 @@
     }
 }
 
+// usage : gradlew -Pparam="excludeLibs" <taskname>
 task packageReactNdkLibs(dependsOn: buildReactNdkLib, type: Copy) {
-    from("$buildDir/react-ndk/all")
-    into("$buildDir/react-ndk/exported")
-    exclude("**/libjsc.so")
+    def arg = project.hasProperty('param') ? project.property('param') : 'noArg'
+    from "$buildDir/react-ndk/all"
+    from("$thirdPartyNdkDir/jsc/jni")
+    if(arg.equals("excludeLibs")) {
+        exclude '**/*.so'
+    } else {
+        exclude '**/libjsc.so'
+    }
+    into "$buildDir/react-ndk/exported"
 }
 
 task packageReactNdkLibsForBuck(dependsOn: packageReactNdkLibs, type: Copy) {
